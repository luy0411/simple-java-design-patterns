===================================================
================= Design Patterns =================
===================================================

In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design.


######### Creational ###########
Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.

>>> Builder - Separates object construction from its representation
>>> Singleton - A class of which only a single instance can exist
>>> Factory - Creates an instance of several derived classes

######### Structural ###########
Ease the design by identifying a simple way to realize relationships between entities.

>>> Decorator - Add responsibilities to objects dynamically
>>> Facade - A single class that represents an entire subsystem
>>> Flyweigth - A fine-grained instance used for efficient sharing

######### Behavioral ###########
Identify common communication patterns between objects and realize these patterns.

>>> Chain of Responsability - A way of passing a request between a chain of objects
>>> Strategy - Encapsulates an algorithm inside a class
>>> Template - Defer the exact steps of an algorithm to a subclass
>>> Iterator - Sequentially access the elements of a collection
>>> Observer - A way of notifying change to a number of classes
>>> State - Alter an object's behavior when its state changes
>>> Memento - Capture and restore an object's internal state
>>> Interpreter - A way to include language elements in a program
>>> Visitor - Defines a new operation to a class without change

===============================================
================== Source =====================
===============================================
https://sourcemaking.com/design_patterns